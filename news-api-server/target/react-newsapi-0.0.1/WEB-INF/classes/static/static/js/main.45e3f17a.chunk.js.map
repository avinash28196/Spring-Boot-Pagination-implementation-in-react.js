{"version":3,"sources":["components/header.js","components/newsFeed.js","components/fetchNews.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","NewsFeed","props","style","maxWidth","headline","category","pubDate","snippet","href","webURL","FetchNews","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","populateRowsWithData","state","articlesDetails","map","article","newsFeed","key","id","dateString","activePage","totalPages","itemsCountPerPage","totalItemsCount","handlePageChange","bind","assertThisInitialized","fetchURL","page","_this2","axios","get","concat","then","response","data","size","totalElements","setState","updatedResults","content","results","Date","toGMTString","objectSpread","console","log","pageNumber","Pagination_default","hideNavigation","pageRangeDisplayed","itemClass","linkClass","onChange","React","Component","App","header","fetchNews","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45e3f17a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\n  return (\n    <div className=\"jumbotron \">\n      <div className=\"container \">\n        <h1 className=\"display-4 \">React Pagination Demo</h1>\n        <p className=\"lead\">Itâ€™s important to limit the amount of data queried by your API in a request.</p>\n      </div>\n    </div>\n    );\n  };\n\n  export default Header;\n","import React from 'react';\n\n\nfunction NewsFeed (props) {\n\n  let styles = {\n    maxWidth: '700px'\n  };\n\n\n  return (\n      <div className=\"card border-dark bg-light text-dark text-center p-3 mb-3 ml-5 mr-5\" style={styles}>\n        <div className=\"card-header\">\n          <h2>{props.headline}</h2>\n          <h4 className=\"card-title btn btn-secondary\">{props.category}</h4>\n        </div>\n        <div className=\"card-body\">\n\n          <small className=\"text-muted mb-3\">{props.pubDate}</small>\n          <p className=\"card-text\">{props.snippet}</p>\n        </div>\n        <div className=\"card-footer\">\n          <a href={props.webURL} className=\"btn btn-secondary\">Read more</a>\n        </div>\n      </div>\n  );\n}\n\nexport default NewsFeed;\n","import React from 'react';\nimport axios from 'axios';\nimport Pagination from \"react-js-pagination\";\nimport NewsFeed  from './newsFeed.js';\n\nclass FetchNews extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      articlesDetails: [],\n      activePage:1,\n      totalPages: null,\n      itemsCountPerPage:null,\n      totalItemsCount:null\n    };\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.fetchURL = this.fetchURL.bind(this);\n  }\n\n  fetchURL(page) {\n\n    axios.get(`http://localhost:8080/articles?page=${page}&size=5`)\n      .then( response => {\n\n          const totalPages = response.data.totalPages;\n          const itemsCountPerPage = response.data.size;\n          const totalItemsCount = response.data.totalElements;\n\n          this.setState({totalPages: totalPages})\n          this.setState({totalItemsCount: totalItemsCount})\n          this.setState({itemsCountPerPage: itemsCountPerPage})\n\n          const results = response.data.content;\n\n          const updatedResults = results.map(results => {\n\n            var timestamp = new Date(results.pubDate)\n            var dateString = timestamp.toGMTString()\n            return {\n                ...results, dateString\n              }\n            });\n\n            this.setState({articlesDetails: updatedResults});\n            console.log(updatedResults);\n            console.log(this.state.activePage);\n            console.log(this.state.itemsCountPerPage);\n\n        }\n      );\n    }\n\n  componentDidMount () {\n      this.fetchURL(this.state.activePage)\n    }\n\n  handlePageChange(pageNumber) {\n    console.log(`active page is ${pageNumber}`);\n    this.setState({activePage: pageNumber})\n    this.fetchURL(pageNumber)\n\n    }\n\n  populateRowsWithData = () => {\n    const articleData = this.state.articlesDetails.map(article => {\n        return <NewsFeed\n            key = {article.id}\n            headline = {article.headline}\n            category = {article.category}\n            pubDate = {article.dateString}\n            snippet = {article.snippet}\n            webURL = {article.webURL}\n          />;\n      });\n\n      return articleData\n    }\n\n  render(){\n\n    return (\n      <div >\n\n      {this.populateRowsWithData()}\n\n      <div className=\"d-flex justify-content-center\">\n        <Pagination\n         hideNavigation\n         activePage={this.state.activePage}\n         itemsCountPerPage={this.state.itemsCountPerPage}\n         totalItemsCount={this.state.totalItemsCount}\n         pageRangeDisplayed={10}\n         itemClass='page-item'\n         linkClass='btn btn-light'\n         onChange={this.handlePageChange}\n         />\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default FetchNews;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Header from './components/header.js';\nimport FetchNews  from './components/fetchNews.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"d-flex justify-content-center\">\n          <FetchNews />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}